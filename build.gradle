import org.springframework.boot.gradle.plugin.SpringBootPlugin


plugins {
    id 'org.springframework.boot' version "${spring_boot}" apply(false)
    id 'io.spring.dependency-management' version "${io_spring_dependency_management}" apply(false)
}

allprojects {
    project ->
        {
            group 'cn.telecom'
            version "${telecom}"

            repositories {
                mavenLocal()
                maven {
                    url "https://maven.aliyun.com/repository/public/"
                }
                maven {
                    url "https://maven.aliyun.com/repository/spring/"
                }
            }
        }
}

static boolean isExcludedModule(project) {
    return ["telecom-bom", "telecom-flow"].contains(project.name)
}

subprojects {
    project ->
        if (isExcludedModule(project)) {
            return
        }

        apply plugin: 'java'
        apply plugin: 'idea'
        apply plugin: 'io.spring.dependency-management'
        apply plugin: 'maven-publish'

        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
        [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

        dependencyManagement {
            imports {
                mavenBom SpringBootPlugin.BOM_COORDINATES
                mavenBom "org.springframework.cloud:spring-cloud-dependencies:${spring_cloud}"
                mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:${spring_cloud_alibaba}"
            }
        }

        tasks.register('sourceJar', Jar) {
            from sourceSets.main.allJava
        }

        publishing {

            publications {
                maven(MavenPublication) {
                    from components.java
                    artifact sourceJar {
                        classifier "sources"
                    }
                }
            }

            repositories {
                maven {
                    allowInsecureProtocol = true

                    if (project.version.endsWith('-SNAPSHOT')) {

                    } else {
                    }
                   
                }
            }
        }
}